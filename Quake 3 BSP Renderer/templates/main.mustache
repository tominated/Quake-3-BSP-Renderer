{{% CONTENT_TYPE:TEXT }}

#include <metal_stdlib>
using namespace metal;

struct VertexIn
{
    float4 position [[attribute(0)]];
    float4 normal [[attribute(1)]];
    float4 color [[attribute(2)]];
    float2 textureCoord [[attribute(3)]];
    float2 lightmapCoord [[attribute(4)]];
};

struct VertexOut
{
    float4 position [[position]];
    float4 normal;
    float4 color;
    float2 textureCoord;
    float2 lightmapCoord;
};

struct Uniforms
{
    float time;
    float4x4 modelMatrix;
    float4x4 viewMatrix;
    float4x4 projectionMatrix;
};

vertex VertexOut renderVert(VertexIn in [[stage_in]],
                            constant Uniforms &uniforms [[buffer(1)]],
                            uint vid [[vertex_id]])
{
    VertexOut out;

    out.position = uniforms.projectionMatrix * uniforms.viewMatrix * uniforms.modelMatrix * float4(in.position);
    out.normal = float4(in.normal);
    out.color = float4(in.color);
    out.textureCoord = float2(in.textureCoord);
    out.lightmapCoord = float2(in.lightmapCoord);

    return out;
}

fragment half4 renderFrag(VertexOut vert [[stage_in]],
                          constant Uniforms &uniforms [[buffer(0)]],
                          texture2d<half> tex [[texture(0)]],
                          sampler smp [[sampler(0)]])
{
    float2 textureCoord = {{textureCoordinateGenerator}};

    half4 color = {{rgbGenerator}};
    half4 diffuse = tex.sample(smp, textureCoord);
    half alpha = {{alphaGenerator}};

    {{alphaFunction}}

    {{#textureCoordinateMods}}{{template}}{{/textureCoordinateMods}}

    half4 result = color * diffuse;
    result[3] = alpha;

    return result;
}
